setwd("~/R.Projects/height_associations/all_chromosomes_gwas")

raw.snps <- read.table("all_snps_GENO")

colnames(raw.snps) <- c("#Chr", "Position", "ID", "Ref", "Alt", "Test", "Obs_ct", "Beta", "Se", "T-stat", "P")

# we want to only keep rows with significant pvalues in raw.snps
sigsnps <- raw.snps[ raw.snps$P <= 10^-5 & !is.na(raw.snps$P), ]

# reading in joe's blocks file
joes.blocks <- read.table ( "fourier_ls-all.bed", stringsAsFactors = FALSE , header = TRUE )

# chromosome ID to match domdev frame chromosome ID's
joes.blocks$chr <- gsub ( 'chr' , '' , joes.blocks$chr )

# row ID creation
joes.blocks <- cbind (joes.blocks, "ID" = 1:nrow (joes.blocks) )

  # progress bar for assigning joe's blocks numbers to each row in significant snps frame (longest part of program)
pb <- txtProgressBar( min = 0, max = nrow ( sigsnps ) , style= 3 )
for ( i in 1:nrow ( sigsnps ) ) {
  for ( j in 1:nrow ( joes.blocks ) ) {
    if ( sigsnps [ i, "Position" ] >= joes.blocks [ j, "start" ] &
         sigsnps [ i, "Position" ] <= joes.blocks [ j, "stop" ] &
         sigsnps [ i, "#Chr" ] == joes.blocks [ j, "chr" ] ) {
      sigsnps [ i, "Block" ] <- joes.blocks [ j, "ID" ]
    }
  }
  setTxtProgressBar( pb, i )
}

write.table(sigsnps, "sigsnps_blocks.csv", sep=",")

sigsnps <- read.table("sigsnps_blocks.csv", sep=",", stringsAsFactors = FALSE )

most_sig_snps <- function(dataframe, avgeff = FALSE, domdev = FALSE) {
    if (avgeff) {
        blocks <- unique(dataframe$Block)
        sigsnps_df <- data.frame()
        for(i in 1:length(blocks)) {
            new.df <- dataframe[dataframe$Block == blocks[i] & dataframe$Test == "ADD",]
            sigsnps_df[i, ] <- new.df[new.df$P == min(new.df$P), ]
        }
    }

    if (domdev) {
        blocks <- unique(dataframe$Block)
        sigsnps_list <- vector(mode = "character", length = length(blocks))
        for(i in 1:length(blocks)) {
            new.df <- dataframe[dataframe$Block == blocks[i] & dataframe$Test == "DOMDEV",]
            sigsnps_list[i] <- new.df[new.df$P == min(new.df$P), "ID"]
        }
     }

    return(sigsnps_df)
}

most_sigsnps <- most_sig_snps(sigsnps, avgeff = TRUE )



